//1.Write a C Program to print the sum of boundary elements of a matrix .
#include<stdio.h>
#include<stdlib.h>
int main()
{
    int **a,r,c,i,j;
    printf("enter the number of rows");
    scanf("%d",&r);
    printf("enter the number of coloumn");
    scanf("%d",&c);
    printf("enter the matrix element");
    a=(int**)malloc(r*sizeof(int*));
    for(i=0;i<r;i++)
        *(a+i)=(int*)malloc(c*sizeof(int));

    for(i=0;i<r;i++)
    {
        for(j=0;j<c;j++)
        {
            scanf("%d",*(a+i)+j);
        }
    }

    i=0;int sum1=0;
    for(j=0;j<c;j++)
        sum1=sum1+*(*(a+i)+j);

    i=r-1;int sum2=0;
    if(i!=0)
    {
        for(j=0;j<c;j++)
            sum2=sum2+*(*(a+i)+j);
    }

    j=0; int sum3=0;
    for(i=1;i<r-1;i++)
        sum3=sum3+*(*(a+i)+j);

    j=c-1; int sum4=0;
    for(i=1;i<r-1;i++)
        sum4=sum4+*(*(a+i)+j);

    printf("Sum of boundary is %d",sum1+sum2+sum3+sum4);
    return 0;
}

//2.Java Program to find the longest repeating sequence in a string.
import java.util.Scanner;
import java.util.*;
public class LongestRepeatingSequence {  
    //Checks for the largest common prefix  
    public static String lcp(String s, String t){  
        int n = Math.min(s.length(),t.length());  
        for(int i = 0; i < n; i++){  
            if(s.charAt(i) != t.charAt(i)){  
                return s.substring(0,i);  
            }  
        }  
        return s.substring(0,n);  
    }  
  
    public static void main(String[] args) {  
            Scanner sc= new Scanner(System.in); //System.in is a standard input stream  
            System.out.print("Enter a string: ");  
            String str= sc.nextLine();              //reads string   
            System.out.println("You have entered: "+str);             
            String lrs="";  
        int n = str.length();  
        for(int i = 0; i < n; i++){  
            for(int j = i+1; j < n; j++){  
                //Checks for the largest common factors in every substring  
                String x = lcp(str.substring(i,n),str.substring(j,n));  
                //If the current prefix is greater than previous one  
                //then it takes the current one as longest repeating sequence  
                if(x.length() > lrs.length()) lrs=x;  
            }  
        }  
        System.out.println("Longest repeating sequence: "+lrs);  
    }  
} 
