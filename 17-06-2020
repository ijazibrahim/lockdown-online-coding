//1.Write a C Program to Count numbers that don’t contain 3.
#include <stdio.h> 
int count(int n) 
{ 
    // Base cases (Assuming n is not negative) 
    if (n < 3) 
        return n; 
    if (n >= 3 && n < 10) 
       return n-1; 
  
    // Calculate 10^(d-1) (10 raise to the power d-1) where d is 
    // number of digits in n. po will be 100 for n = 578 
    int po = 1; 
    while (n/po > 9) 
        po = po*10; 
  
    // find the most significant digit (msd is 5 for 578) 
    int msd = n/po; 
  
    if (msd != 3) 
      // For 578, total will be 4*count(10^2 - 1) + 4 + count(78) 
      return count(msd)*count(po - 1) + count(msd) + count(n%po); 
    else
      // For 35, total will be equal to count(29) 
      return count(msd*po - 1); 
} 
int main() 
{  
    int n;
    printf("Enter n value:");
    scanf("%d",&n);
    printf("Count of the numbers that don’t contain 3:");
    printf ("%d ", count(n)); 
    return 0; 
} 

//2.Find the smallest positive integer value that cannot be represented as sum of any subset of a given array sorted in ascending order. 
class FindSmallestInteger 
{ 
	// Returns the smallest number that cannot be represented as sum 
	// of subset of elements from set represented by sorted array arr[0..n-1] 
	int findSmallest(int arr[], int n) 
	{ 
		int res = 1; // Initialize result 

		// Traverse the array and increment 'res' if arr[i] is 
		// smaller than or equal to 'res'. 
		for (int i = 0; i < n && arr[i] <= res; i++) 
			res = res + arr[i]; 

		return res; 
	} 

	// Driver program to test above functions 
	public static void main(String[] args) 
	{ 
		FindSmallestInteger small = new FindSmallestInteger(); 
		int arr1[] = {1, 3, 4, 5}; 
		int n1 = arr1.length; 
		System.out.println(small.findSmallest(arr1, n1)); 

		int arr2[] = {1, 2, 6, 10, 11, 15}; 
		int n2 = arr2.length; 
		System.out.println(small.findSmallest(arr2, n2)); 

		int arr3[] = {1, 1, 1, 1}; 
		int n3 = arr3.length; 
		System.out.println(small.findSmallest(arr3, n3)); 

		int arr4[] = {1, 1, 3, 4}; 
		int n4 = arr4.length; 
		System.out.println(small.findSmallest(arr4, n4)); 

	} 
} 
