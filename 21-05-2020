//1 Write a C program to implement SRTF process scheduling.

#include<stdio.h>
int main()
{
    int at[10],bt[10],rt[10],endTime,i,smallest;
    int remain=0,n,time,sum_wait=0,sum_turnaround=0;
    printf("Enter no of Processes : ");
    scanf("%d",&n);
    for(i=0;i<n;i++)
    {
        printf("Enter arrival time for Process P%d : ",i+1);
        scanf("%d",&at[i]);
        printf("Enter burst time for Process P%d : ",i+1);
        scanf("%d",&bt[i]);
        rt[i]=bt[i];
    }
    printf("\n\nProcess\t|Turnaround Time| Waiting Time\n\n");
    rt[9]=9999;
    for(time=0;remain!=n;time++)
    {
        smallest=9;
        for(i=0;i<n;i++)
        {
            if(at[i]<=time && rt[i]<rt[smallest] && rt[i]>0)
            {
                smallest=i;
            }
        }
        rt[smallest]--;
        if(rt[smallest]==0)
        {
            remain++;
            endTime=time+1;
            printf("\nP[%d]\t|\t%d\t|\t%d",smallest+1,endTime-at[smallest],endTime-bt[smallest]-at[smallest]);
            sum_wait+=endTime-bt[smallest]-at[smallest];
            sum_turnaround+=endTime-at[smallest];
        }
    }
    printf("\n\nAverage waiting time = %f\n",sum_wait*1.0/n);
    printf("Average Turnaround time = %f",sum_turnaround*1.0/5);
    return 0;
}

//2 Write C Program to create Singly Liked List with n elements and reverse the elements using C. 

#include <stdio.h> 
#include <stdlib.h> 
  
/* Link list node */
struct Node { 
    int data; 
    struct Node* next; 
}; 
  
/* Function to reverse the linked list */
static void reverse(struct Node** head_ref) 
{ 
    struct Node* prev = NULL; 
    struct Node* current = *head_ref; 
    struct Node* next = NULL; 
    while (current != NULL) { 
        // Store next 
        next = current->next; 
  
        // Reverse current node's pointer 
        current->next = prev; 
  
        // Move pointers one position ahead. 
        prev = current; 
        current = next; 
    } 
    *head_ref = prev; 
} 
  
/* Function to push a node */
void push(struct Node** head_ref, int new_data) 
{ 
    struct Node* new_node = (struct Node*)malloc(sizeof(struct Node)); 
    new_node->data = new_data; 
    new_node->next = (*head_ref); 
    (*head_ref) = new_node; 
} 
  
/* Function to print linked list */
void printList(struct Node* head) 
{ 
    struct Node* temp = head; 
    while (temp != NULL) { 
        printf("%d  ", temp->data); 
        temp = temp->next; 
    } 
} 
  
/* Driver program to test above function*/
int main() 
{ 
    /* Start with the empty list */
    struct Node* head = NULL; 
  
    push(&head, 20); 
    push(&head, 4); 
    push(&head, 15); 
    push(&head, 85); 
  
    printf("Given linked list\n"); 
    printList(head); 
    reverse(&head); 
    printf("\nReversed Linked list \n"); 
    printList(head); 
    getchar(); 
}

//3 Write a C program to construct a singly linked list by removing duplicate elements in the sorted linked list.

#include<stdio.h>
#include<stdlib.h>
struct node
{
    int data;
    struct node* next;
};
void insert_elements(struct node** head, int new_data)
{
    struct node* new_node = (struct node*) malloc(sizeof(struct node));
    new_node -> data = new_data;
    new_node -> next = (*head);
    (*head) = new_node;
}

void display_list(struct node *node)
{
    while (node!=NULL)
    {
        printf("%d", node->data);
        node = node -> next;
    }
}

void remove_duplicate_elements(struct node* head)
{
    struct node* current = head;

    struct node* next_next;

    if (current == NULL)
        return;

    while (current -> next != NULL)
    {
        if (current -> data == current -> next -> data)
        {
            next_next = current -> next -> next;
            free(current -> next);
            current -> next = next_next;
        }
        else
        {
            current = current -> next;
        }
    }
}


int main()
{
    struct node* head = NULL;
    int n,i;
    printf("\nEnter the total number of elements :" );
    scanf("%d", &n);
    printf("\nEnter the sorted linked list :");
    for(i = 0; i < n; i++)
    {
        int data;
        scanf("%d", &data);
        insert_elements(&head, data);
    }
    printf("\nLinked list before removing duplicates : ");
    display_list(head);
    printf("\n");
    remove_duplicate_elements(head);
    printf("\nLinked list after removing duplicates : ");
    display_list(head);
    printf("\n");
    return 0;
}
