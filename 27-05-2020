//1.In Bubble sort, each pass consists of comparison each element in the file with its successor (i.e. x[i] with x[i+1]) and interchanging two elements if they are not in the proper order. The array may be sorted in any pass. If the array is sorted, then remaining passes should be skipped off.
//Write a C Program to sort an array of integers in ascending order and display the sorted array and Number of passes performed for sorting.
#include <stdio.h> 
  
void swap(int *xp, int *yp) 
{ 
    int temp = *xp; 
    *xp = *yp; 
    *yp = temp; 
} 
  
// A function to implement bubble sort 
void bubbleSort(int arr[], int n) 
{ 
   int i, j; 
   for (i = 0; i < n-1; i++)       
  
       // Last i elements are already in place    
       for (j = 0; j < n-i-1; j++)  
           if (arr[j] > arr[j+1]) 
              swap(&arr[j], &arr[j+1]); 
} 
  
/* Function to print an array */
void printArray(int arr[], int size) 
{ 
    int i; 
    for (i=0; i < size; i++) 
        printf("%d ", arr[i]); 
    printf("\n"); 
} 
  
// Driver program to test above functions 
int main() 
{ 
    int arr[] = {64, 34, 25, 12, 22, 11, 90}; 
    int n = sizeof(arr)/sizeof(arr[0]); 
    bubbleSort(arr, n); 
    printf("Sorted array: \n"); 
    printArray(arr, n); 
    return 0; 
}

//2.Given an array arr[] of the positive integers of size N, the task is to find the largest element on the left side of each index which is smaller than the element present at that index.
//Note: If no such element is found then print -1.
#include <bits/stdc++.h> 
using namespace std; 
void findMaximumBefore(int arr[], int n)
{ 
	for (int i = 0; i < n; i++)
	{ 
		int currAns = -1; 
		for (int j = i - 1; j >= 0; j--) 
		{ 
			if (arr[j] > currAns && arr[j] < arr[i])
			{ 
				currAns = arr[j]; 
			} 
		} 
		cout << currAns << " "; 
	} 
} 
int main() 
{ 
	int arr[] = { 4, 7, 6, 8, 5 }; 
	int n = sizeof(arr) / sizeof(arr[0]); 
	findMaximumBefore(arr, n); 
} 
